node js packages:
    -a folder with modules and package.json File
    -to handle common problems
    -use to npm to install packages (npm -node package manager)
    -packge.json ---file to configure node packages
    -package-lock.json --- to contain versions of installed packages
    -node_modules  --contains everyinstalled packages for a project


Backend concepts:
    - client server Architecture : client sends requests to server using/via http and server resolve it.
    - API -- Application programming interface
    - REST -- Representational State Transfer Protocol -use json data representation approch for data communication
    - CRUD -- Create(POST), Retreve(GET), Update(PUT/PATCH), Delete(DELETE) | PUT---complete updatae and PATCH --partuel Update
    - CORS -- Cross Origin Resource Sharing. 

Express.js
----------
    > Framework of Node.js for client-server Application
        steps:
            1.Create a folder or server
            2.create package.json file using command : npm init -y
            3.include "start": "index.js" in scripts in package.json
            4.install packages for creating express.js server
                -express : npm i express
                -cors : npm i cors
                -dotenv : nom i dotenv
            5-create file.env inside server folder.dotenv package used to load.env file having environmental variables(vaiable will get the value only at the time of compilation) in your project
            6.create .gitignore file to add module
            7.create index.js
            8-Define express server index.js file	
			steps=>
				-import dotenv package inorder to load .env file
				-import express package
				-import cors
				-create express server
				-use cors to server
				-parse json data into native format in server
				-configure port number for server app
				-resolve request to localhost :4000

------------------------------------------
Software Architecture /Software Pattern:
	-Defines the basic strecture of apps in development
	-in express we use MVC patter (Model-View-Controller)
		MOdel : Component which handles data storage and data manipulation
		View : Component which handle user interactions
		Controller : Component which moniter and manage overall functionalities and other components like Model &View

Browser------->controller------->model----->database---->model----->controller------>view------->browser


MongoDB
----------

1.Database is used for permenent storage of data
2.Difference b/w SQL and MongoDB

    SQL                                             MongoDB
-------------                                     -------------
- relatinal/SQL DBMS                            -Document oriented/NOsql DBMS 
-Store data in dable as row & colums            -Collection of JSON Documents
-Fixed schemas                                  -Dynamic schemas

mongoDB terminal
---------------

1-show dbs
2-use filename
3-to show collection name=- show collections
4-to insert new data =- db.users.insertOne({"username":"rono","email":"rono@gmail.com","password":"rono","profile":"","github":"","linkdin":""})
5-to fetch data =- db.users.find({"username":"rono"})
6-to fecth one data =-  db.users.findOne({"username":"rono"})
7-to fetch data using on id =-db.users.findOne({"_id":ObjectId('65a60966dac3811f6f3f175c')})

- db.users.aggregate({$lookup:{from:"projects",localField:"_id",foreignField:"userId",as:"userprojects"}})
- db.collections.deleteOne({_id:ObjectId('id)}) - to delete one using id
- db.collections.deleteMany({}) - to delete full data in that collections

CRUD Operations Queries :
	1. create
	   - insertOne()
	   - insertMany()
	2. Retrieve
	   - find()
	   - findOne()
	3. update
	   - updateOne()
	   - updateMany()
	4. Delete
	   - deleteOne()
	   - deleteMany()

   Complex Query
	- $eq/$neq
	- $gt/$gte/$lt/$lte
	- $expr
	- $push
	- $pull
	- $set
	- $unset
	- $exists
	- $or, $and
	- $in , $nin
	- $sort()
	- count()
	- limit()

=> aggregation : to join different collections
	- $lookup :

syntax of aggregation:
	{
   $lookup:
          {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
    }


-MongoDB
------
> to create cloud plateform
> create an account in atlas cloud and connect document 
> 1. create a project 
> 2. - build a database(username+password(should not contain spcl chara),my local env,etc) -> cluster0-> view collections -> create database -> create database and one  collection
- network access -> Ip access list -> my Ip adress -> Edit -> Allow Access frpm anywhere  